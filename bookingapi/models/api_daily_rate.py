# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiDailyRate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offset': 'int',
        'daily_net': 'float',
        'daily_selling_rate': 'float'
    }

    attribute_map = {
        'offset': 'offset',
        'daily_net': 'dailyNet',
        'daily_selling_rate': 'dailySellingRate'
    }

    def __init__(self, offset=None, daily_net=None, daily_selling_rate=None):
        """
        ApiDailyRate - a model defined in Swagger
        """

        self._offset = None
        self._daily_net = None
        self._daily_selling_rate = None

        if offset is not None:
          self.offset = offset
        if daily_net is not None:
          self.daily_net = daily_net
        if daily_selling_rate is not None:
          self.daily_selling_rate = daily_selling_rate

    @property
    def offset(self):
        """
        Gets the offset of this ApiDailyRate.

        :return: The offset of this ApiDailyRate.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this ApiDailyRate.

        :param offset: The offset of this ApiDailyRate.
        :type: int
        """

        self._offset = offset

    @property
    def daily_net(self):
        """
        Gets the daily_net of this ApiDailyRate.

        :return: The daily_net of this ApiDailyRate.
        :rtype: float
        """
        return self._daily_net

    @daily_net.setter
    def daily_net(self, daily_net):
        """
        Sets the daily_net of this ApiDailyRate.

        :param daily_net: The daily_net of this ApiDailyRate.
        :type: float
        """

        self._daily_net = daily_net

    @property
    def daily_selling_rate(self):
        """
        Gets the daily_selling_rate of this ApiDailyRate.

        :return: The daily_selling_rate of this ApiDailyRate.
        :rtype: float
        """
        return self._daily_selling_rate

    @daily_selling_rate.setter
    def daily_selling_rate(self, daily_selling_rate):
        """
        Sets the daily_selling_rate of this ApiDailyRate.

        :param daily_selling_rate: The daily_selling_rate of this ApiDailyRate.
        :type: float
        """

        self._daily_selling_rate = daily_selling_rate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiDailyRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
