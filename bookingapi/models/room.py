# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Room(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'id': 'int',
        'code': 'str',
        'name': 'str',
        'pax': 'list[ApiPax]',
        'rate': 'list[ApiRate]'
    }

    attribute_map = {
        'status': 'status',
        'id': 'id',
        'code': 'code',
        'name': 'name',
        'pax': 'pax',
        'rate': 'rate'
    }

    def __init__(self, status=None, id=None, code=None, name=None, pax=None, rate=None):
        """
        Room - a model defined in Swagger
        """

        self._status = None
        self._id = None
        self._code = None
        self._name = None
        self._pax = None
        self._rate = None

        if status is not None:
          self.status = status
        if id is not None:
          self.id = id
        if code is not None:
          self.code = code
        if name is not None:
          self.name = name
        if pax is not None:
          self.pax = pax
        if rate is not None:
          self.rate = rate

    @property
    def status(self):
        """
        Gets the status of this Room.

        :return: The status of this Room.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Room.

        :param status: The status of this Room.
        :type: str
        """
        allowed_values = ["NEW", "PRECONFIRMED", "CONFIRMED", "TO_BE_UPDATED", "CANCELLED", "TO_BE_CANCELLED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def id(self):
        """
        Gets the id of this Room.

        :return: The id of this Room.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Room.

        :param id: The id of this Room.
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """
        Gets the code of this Room.

        :return: The code of this Room.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Room.

        :param code: The code of this Room.
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """
        Gets the name of this Room.

        :return: The name of this Room.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Room.

        :param name: The name of this Room.
        :type: str
        """

        self._name = name

    @property
    def pax(self):
        """
        Gets the pax of this Room.

        :return: The pax of this Room.
        :rtype: list[ApiPax]
        """
        return self._pax

    @pax.setter
    def pax(self, pax):
        """
        Sets the pax of this Room.

        :param pax: The pax of this Room.
        :type: list[ApiPax]
        """

        self._pax = pax

    @property
    def rate(self):
        """
        Gets the rate of this Room.

        :return: The rate of this Room.
        :rtype: list[ApiRate]
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """
        Sets the rate of this Room.

        :param rate: The rate of this Room.
        :type: list[ApiRate]
        """

        self._rate = rate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Room):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
