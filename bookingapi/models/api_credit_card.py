# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiCreditCard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'name': 'str',
        'payment_type': 'str'
    }

    attribute_map = {
        'code': 'code',
        'name': 'name',
        'payment_type': 'paymentType'
    }

    def __init__(self, code=None, name=None, payment_type=None):
        """
        ApiCreditCard - a model defined in Swagger
        """

        self._code = None
        self._name = None
        self._payment_type = None

        if code is not None:
          self.code = code
        if name is not None:
          self.name = name
        if payment_type is not None:
          self.payment_type = payment_type

    @property
    def code(self):
        """
        Gets the code of this ApiCreditCard.

        :return: The code of this ApiCreditCard.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this ApiCreditCard.

        :param code: The code of this ApiCreditCard.
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """
        Gets the name of this ApiCreditCard.

        :return: The name of this ApiCreditCard.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiCreditCard.

        :param name: The name of this ApiCreditCard.
        :type: str
        """

        self._name = name

    @property
    def payment_type(self):
        """
        Gets the payment_type of this ApiCreditCard.

        :return: The payment_type of this ApiCreditCard.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """
        Sets the payment_type of this ApiCreditCard.

        :param payment_type: The payment_type of this ApiCreditCard.
        :type: str
        """
        allowed_values = ["AT_HOTEL", "AT_WEB"]
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiCreditCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
