# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiBooking(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference': 'str',
        'cancellation_reference': 'str',
        'client_reference': 'str',
        'creation_date': 'date',
        'status': 'str',
        'modification_policies': 'ApiModificationPolicies',
        'ag_commision': 'float',
        'commision_vat': 'float',
        'creation_user': 'str',
        'holder': 'ApiHolder',
        'remark': 'str',
        'total_selling_rate': 'float',
        'total_net': 'float',
        'pending_amount': 'float',
        'currency': 'str',
        'hotel': 'ApiHotel'
    }

    attribute_map = {
        'reference': 'reference',
        'cancellation_reference': 'cancellationReference',
        'client_reference': 'clientReference',
        'creation_date': 'creationDate',
        'status': 'status',
        'modification_policies': 'modificationPolicies',
        'ag_commision': 'agCommision',
        'commision_vat': 'commisionVAT',
        'creation_user': 'creationUser',
        'holder': 'holder',
        'remark': 'remark',
        'total_selling_rate': 'totalSellingRate',
        'total_net': 'totalNet',
        'pending_amount': 'pendingAmount',
        'currency': 'currency',
        'hotel': 'hotel'
    }

    def __init__(self, reference=None, cancellation_reference=None, client_reference=None, creation_date=None, status=None, modification_policies=None, ag_commision=None, commision_vat=None, creation_user=None, holder=None, remark=None, total_selling_rate=None, total_net=None, pending_amount=None, currency=None, hotel=None):
        """
        ApiBooking - a model defined in Swagger
        """

        self._reference = None
        self._cancellation_reference = None
        self._client_reference = None
        self._creation_date = None
        self._status = None
        self._modification_policies = None
        self._ag_commision = None
        self._commision_vat = None
        self._creation_user = None
        self._holder = None
        self._remark = None
        self._total_selling_rate = None
        self._total_net = None
        self._pending_amount = None
        self._currency = None
        self._hotel = None

        if reference is not None:
          self.reference = reference
        if cancellation_reference is not None:
          self.cancellation_reference = cancellation_reference
        if client_reference is not None:
          self.client_reference = client_reference
        if creation_date is not None:
          self.creation_date = creation_date
        if status is not None:
          self.status = status
        if modification_policies is not None:
          self.modification_policies = modification_policies
        if ag_commision is not None:
          self.ag_commision = ag_commision
        if commision_vat is not None:
          self.commision_vat = commision_vat
        if creation_user is not None:
          self.creation_user = creation_user
        if holder is not None:
          self.holder = holder
        if remark is not None:
          self.remark = remark
        if total_selling_rate is not None:
          self.total_selling_rate = total_selling_rate
        if total_net is not None:
          self.total_net = total_net
        if pending_amount is not None:
          self.pending_amount = pending_amount
        if currency is not None:
          self.currency = currency
        if hotel is not None:
          self.hotel = hotel

    @property
    def reference(self):
        """
        Gets the reference of this ApiBooking.

        :return: The reference of this ApiBooking.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this ApiBooking.

        :param reference: The reference of this ApiBooking.
        :type: str
        """

        self._reference = reference

    @property
    def cancellation_reference(self):
        """
        Gets the cancellation_reference of this ApiBooking.

        :return: The cancellation_reference of this ApiBooking.
        :rtype: str
        """
        return self._cancellation_reference

    @cancellation_reference.setter
    def cancellation_reference(self, cancellation_reference):
        """
        Sets the cancellation_reference of this ApiBooking.

        :param cancellation_reference: The cancellation_reference of this ApiBooking.
        :type: str
        """

        self._cancellation_reference = cancellation_reference

    @property
    def client_reference(self):
        """
        Gets the client_reference of this ApiBooking.

        :return: The client_reference of this ApiBooking.
        :rtype: str
        """
        return self._client_reference

    @client_reference.setter
    def client_reference(self, client_reference):
        """
        Sets the client_reference of this ApiBooking.

        :param client_reference: The client_reference of this ApiBooking.
        :type: str
        """
        if client_reference is not None and len(client_reference) > 20:
            raise ValueError("Invalid value for `client_reference`, length must be less than or equal to `20`")
        if client_reference is not None and len(client_reference) < 1:
            raise ValueError("Invalid value for `client_reference`, length must be greater than or equal to `1`")

        self._client_reference = client_reference

    @property
    def creation_date(self):
        """
        Gets the creation_date of this ApiBooking.

        :return: The creation_date of this ApiBooking.
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this ApiBooking.

        :param creation_date: The creation_date of this ApiBooking.
        :type: date
        """

        self._creation_date = creation_date

    @property
    def status(self):
        """
        Gets the status of this ApiBooking.

        :return: The status of this ApiBooking.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ApiBooking.

        :param status: The status of this ApiBooking.
        :type: str
        """
        allowed_values = ["NEW", "PRECONFIRMED", "CONFIRMED", "TO_BE_UPDATED", "CANCELLED", "TO_BE_CANCELLED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def modification_policies(self):
        """
        Gets the modification_policies of this ApiBooking.

        :return: The modification_policies of this ApiBooking.
        :rtype: ApiModificationPolicies
        """
        return self._modification_policies

    @modification_policies.setter
    def modification_policies(self, modification_policies):
        """
        Sets the modification_policies of this ApiBooking.

        :param modification_policies: The modification_policies of this ApiBooking.
        :type: ApiModificationPolicies
        """

        self._modification_policies = modification_policies

    @property
    def ag_commision(self):
        """
        Gets the ag_commision of this ApiBooking.

        :return: The ag_commision of this ApiBooking.
        :rtype: float
        """
        return self._ag_commision

    @ag_commision.setter
    def ag_commision(self, ag_commision):
        """
        Sets the ag_commision of this ApiBooking.

        :param ag_commision: The ag_commision of this ApiBooking.
        :type: float
        """

        self._ag_commision = ag_commision

    @property
    def commision_vat(self):
        """
        Gets the commision_vat of this ApiBooking.

        :return: The commision_vat of this ApiBooking.
        :rtype: float
        """
        return self._commision_vat

    @commision_vat.setter
    def commision_vat(self, commision_vat):
        """
        Sets the commision_vat of this ApiBooking.

        :param commision_vat: The commision_vat of this ApiBooking.
        :type: float
        """

        self._commision_vat = commision_vat

    @property
    def creation_user(self):
        """
        Gets the creation_user of this ApiBooking.

        :return: The creation_user of this ApiBooking.
        :rtype: str
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """
        Sets the creation_user of this ApiBooking.

        :param creation_user: The creation_user of this ApiBooking.
        :type: str
        """

        self._creation_user = creation_user

    @property
    def holder(self):
        """
        Gets the holder of this ApiBooking.

        :return: The holder of this ApiBooking.
        :rtype: ApiHolder
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """
        Sets the holder of this ApiBooking.

        :param holder: The holder of this ApiBooking.
        :type: ApiHolder
        """

        self._holder = holder

    @property
    def remark(self):
        """
        Gets the remark of this ApiBooking.

        :return: The remark of this ApiBooking.
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """
        Sets the remark of this ApiBooking.

        :param remark: The remark of this ApiBooking.
        :type: str
        """
        if remark is not None and len(remark) > 2000:
            raise ValueError("Invalid value for `remark`, length must be less than or equal to `2000`")
        if remark is not None and len(remark) < 0:
            raise ValueError("Invalid value for `remark`, length must be greater than or equal to `0`")

        self._remark = remark

    @property
    def total_selling_rate(self):
        """
        Gets the total_selling_rate of this ApiBooking.

        :return: The total_selling_rate of this ApiBooking.
        :rtype: float
        """
        return self._total_selling_rate

    @total_selling_rate.setter
    def total_selling_rate(self, total_selling_rate):
        """
        Sets the total_selling_rate of this ApiBooking.

        :param total_selling_rate: The total_selling_rate of this ApiBooking.
        :type: float
        """

        self._total_selling_rate = total_selling_rate

    @property
    def total_net(self):
        """
        Gets the total_net of this ApiBooking.

        :return: The total_net of this ApiBooking.
        :rtype: float
        """
        return self._total_net

    @total_net.setter
    def total_net(self, total_net):
        """
        Sets the total_net of this ApiBooking.

        :param total_net: The total_net of this ApiBooking.
        :type: float
        """

        self._total_net = total_net

    @property
    def pending_amount(self):
        """
        Gets the pending_amount of this ApiBooking.

        :return: The pending_amount of this ApiBooking.
        :rtype: float
        """
        return self._pending_amount

    @pending_amount.setter
    def pending_amount(self, pending_amount):
        """
        Sets the pending_amount of this ApiBooking.

        :param pending_amount: The pending_amount of this ApiBooking.
        :type: float
        """

        self._pending_amount = pending_amount

    @property
    def currency(self):
        """
        Gets the currency of this ApiBooking.

        :return: The currency of this ApiBooking.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this ApiBooking.

        :param currency: The currency of this ApiBooking.
        :type: str
        """

        self._currency = currency

    @property
    def hotel(self):
        """
        Gets the hotel of this ApiBooking.

        :return: The hotel of this ApiBooking.
        :rtype: ApiHotel
        """
        return self._hotel

    @hotel.setter
    def hotel(self, hotel):
        """
        Sets the hotel of this ApiBooking.

        :param hotel: The hotel of this ApiBooking.
        :type: ApiHotel
        """

        self._hotel = hotel

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiBooking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
