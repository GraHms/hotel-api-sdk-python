# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHotels(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_in': 'date',
        'check_out': 'date',
        'hotel': 'list[ApiHotel]',
        'total': 'int'
    }

    attribute_map = {
        'check_in': 'checkIn',
        'check_out': 'checkOut',
        'hotel': 'hotel',
        'total': 'total'
    }

    def __init__(self, check_in=None, check_out=None, hotel=None, total=None):
        """
        ApiHotels - a model defined in Swagger
        """

        self._check_in = None
        self._check_out = None
        self._hotel = None
        self._total = None

        if check_in is not None:
          self.check_in = check_in
        if check_out is not None:
          self.check_out = check_out
        if hotel is not None:
          self.hotel = hotel
        if total is not None:
          self.total = total

    @property
    def check_in(self):
        """
        Gets the check_in of this ApiHotels.

        :return: The check_in of this ApiHotels.
        :rtype: date
        """
        return self._check_in

    @check_in.setter
    def check_in(self, check_in):
        """
        Sets the check_in of this ApiHotels.

        :param check_in: The check_in of this ApiHotels.
        :type: date
        """

        self._check_in = check_in

    @property
    def check_out(self):
        """
        Gets the check_out of this ApiHotels.

        :return: The check_out of this ApiHotels.
        :rtype: date
        """
        return self._check_out

    @check_out.setter
    def check_out(self, check_out):
        """
        Sets the check_out of this ApiHotels.

        :param check_out: The check_out of this ApiHotels.
        :type: date
        """

        self._check_out = check_out

    @property
    def hotel(self):
        """
        Gets the hotel of this ApiHotels.

        :return: The hotel of this ApiHotels.
        :rtype: list[ApiHotel]
        """
        return self._hotel

    @hotel.setter
    def hotel(self, hotel):
        """
        Sets the hotel of this ApiHotels.

        :param hotel: The hotel of this ApiHotels.
        :type: list[ApiHotel]
        """

        self._hotel = hotel

    @property
    def total(self):
        """
        Gets the total of this ApiHotels.

        :return: The total of this ApiHotels.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this ApiHotels.

        :param total: The total of this ApiHotels.
        :type: int
        """

        self._total = total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHotels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
