# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_hotels': 'int',
        'max_rooms': 'int',
        'min_rate': 'float',
        'max_rate': 'float',
        'max_rates_per_room': 'int',
        'packaging': 'bool',
        'payment_type': 'str',
        'hotel_package': 'str',
        'min_category': 'int',
        'max_category': 'int',
        'contract': 'str'
    }

    attribute_map = {
        'max_hotels': 'maxHotels',
        'max_rooms': 'maxRooms',
        'min_rate': 'minRate',
        'max_rate': 'maxRate',
        'max_rates_per_room': 'maxRatesPerRoom',
        'packaging': 'packaging',
        'payment_type': 'paymentType',
        'hotel_package': 'hotelPackage',
        'min_category': 'minCategory',
        'max_category': 'maxCategory',
        'contract': 'contract'
    }

    def __init__(self, max_hotels=None, max_rooms=None, min_rate=None, max_rate=None, max_rates_per_room=None, packaging=False, payment_type=None, hotel_package=None, min_category=None, max_category=None, contract=None):
        """
        ApiFilter - a model defined in Swagger
        """

        self._max_hotels = None
        self._max_rooms = None
        self._min_rate = None
        self._max_rate = None
        self._max_rates_per_room = None
        self._packaging = None
        self._payment_type = None
        self._hotel_package = None
        self._min_category = None
        self._max_category = None
        self._contract = None

        if max_hotels is not None:
          self.max_hotels = max_hotels
        if max_rooms is not None:
          self.max_rooms = max_rooms
        if min_rate is not None:
          self.min_rate = min_rate
        if max_rate is not None:
          self.max_rate = max_rate
        if max_rates_per_room is not None:
          self.max_rates_per_room = max_rates_per_room
        if packaging is not None:
          self.packaging = packaging
        if payment_type is not None:
          self.payment_type = payment_type
        if hotel_package is not None:
          self.hotel_package = hotel_package
        if min_category is not None:
          self.min_category = min_category
        if max_category is not None:
          self.max_category = max_category
        if contract is not None:
          self.contract = contract

    @property
    def max_hotels(self):
        """
        Gets the max_hotels of this ApiFilter.

        :return: The max_hotels of this ApiFilter.
        :rtype: int
        """
        return self._max_hotels

    @max_hotels.setter
    def max_hotels(self, max_hotels):
        """
        Sets the max_hotels of this ApiFilter.

        :param max_hotels: The max_hotels of this ApiFilter.
        :type: int
        """
        if max_hotels is not None and max_hotels > 2000:
            raise ValueError("Invalid value for `max_hotels`, must be a value less than or equal to `2000`")
        if max_hotels is not None and max_hotels < 1:
            raise ValueError("Invalid value for `max_hotels`, must be a value greater than or equal to `1`")

        self._max_hotels = max_hotels

    @property
    def max_rooms(self):
        """
        Gets the max_rooms of this ApiFilter.

        :return: The max_rooms of this ApiFilter.
        :rtype: int
        """
        return self._max_rooms

    @max_rooms.setter
    def max_rooms(self, max_rooms):
        """
        Sets the max_rooms of this ApiFilter.

        :param max_rooms: The max_rooms of this ApiFilter.
        :type: int
        """
        if max_rooms is not None and max_rooms > 50:
            raise ValueError("Invalid value for `max_rooms`, must be a value less than or equal to `50`")
        if max_rooms is not None and max_rooms < 1:
            raise ValueError("Invalid value for `max_rooms`, must be a value greater than or equal to `1`")

        self._max_rooms = max_rooms

    @property
    def min_rate(self):
        """
        Gets the min_rate of this ApiFilter.

        :return: The min_rate of this ApiFilter.
        :rtype: float
        """
        return self._min_rate

    @min_rate.setter
    def min_rate(self, min_rate):
        """
        Sets the min_rate of this ApiFilter.

        :param min_rate: The min_rate of this ApiFilter.
        :type: float
        """
        if min_rate is not None and min_rate < 0:
            raise ValueError("Invalid value for `min_rate`, must be a value greater than or equal to `0`")

        self._min_rate = min_rate

    @property
    def max_rate(self):
        """
        Gets the max_rate of this ApiFilter.

        :return: The max_rate of this ApiFilter.
        :rtype: float
        """
        return self._max_rate

    @max_rate.setter
    def max_rate(self, max_rate):
        """
        Sets the max_rate of this ApiFilter.

        :param max_rate: The max_rate of this ApiFilter.
        :type: float
        """
        if max_rate is not None and max_rate < 0:
            raise ValueError("Invalid value for `max_rate`, must be a value greater than or equal to `0`")

        self._max_rate = max_rate

    @property
    def max_rates_per_room(self):
        """
        Gets the max_rates_per_room of this ApiFilter.

        :return: The max_rates_per_room of this ApiFilter.
        :rtype: int
        """
        return self._max_rates_per_room

    @max_rates_per_room.setter
    def max_rates_per_room(self, max_rates_per_room):
        """
        Sets the max_rates_per_room of this ApiFilter.

        :param max_rates_per_room: The max_rates_per_room of this ApiFilter.
        :type: int
        """
        if max_rates_per_room is not None and max_rates_per_room < 1:
            raise ValueError("Invalid value for `max_rates_per_room`, must be a value greater than or equal to `1`")

        self._max_rates_per_room = max_rates_per_room

    @property
    def packaging(self):
        """
        Gets the packaging of this ApiFilter.

        :return: The packaging of this ApiFilter.
        :rtype: bool
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """
        Sets the packaging of this ApiFilter.

        :param packaging: The packaging of this ApiFilter.
        :type: bool
        """

        self._packaging = packaging

    @property
    def payment_type(self):
        """
        Gets the payment_type of this ApiFilter.

        :return: The payment_type of this ApiFilter.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """
        Sets the payment_type of this ApiFilter.

        :param payment_type: The payment_type of this ApiFilter.
        :type: str
        """
        allowed_values = ["AT_HOTEL", "AT_WEB", "BOTH"]
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def hotel_package(self):
        """
        Gets the hotel_package of this ApiFilter.

        :return: The hotel_package of this ApiFilter.
        :rtype: str
        """
        return self._hotel_package

    @hotel_package.setter
    def hotel_package(self, hotel_package):
        """
        Sets the hotel_package of this ApiFilter.

        :param hotel_package: The hotel_package of this ApiFilter.
        :type: str
        """
        allowed_values = ["YES", "NO", "BOTH"]
        if hotel_package not in allowed_values:
            raise ValueError(
                "Invalid value for `hotel_package` ({0}), must be one of {1}"
                .format(hotel_package, allowed_values)
            )

        self._hotel_package = hotel_package

    @property
    def min_category(self):
        """
        Gets the min_category of this ApiFilter.

        :return: The min_category of this ApiFilter.
        :rtype: int
        """
        return self._min_category

    @min_category.setter
    def min_category(self, min_category):
        """
        Sets the min_category of this ApiFilter.

        :param min_category: The min_category of this ApiFilter.
        :type: int
        """
        if min_category is not None and min_category > 5:
            raise ValueError("Invalid value for `min_category`, must be a value less than or equal to `5`")
        if min_category is not None and min_category < 1:
            raise ValueError("Invalid value for `min_category`, must be a value greater than or equal to `1`")

        self._min_category = min_category

    @property
    def max_category(self):
        """
        Gets the max_category of this ApiFilter.

        :return: The max_category of this ApiFilter.
        :rtype: int
        """
        return self._max_category

    @max_category.setter
    def max_category(self, max_category):
        """
        Sets the max_category of this ApiFilter.

        :param max_category: The max_category of this ApiFilter.
        :type: int
        """
        if max_category is not None and max_category > 5:
            raise ValueError("Invalid value for `max_category`, must be a value less than or equal to `5`")
        if max_category is not None and max_category < 1:
            raise ValueError("Invalid value for `max_category`, must be a value greater than or equal to `1`")

        self._max_category = max_category

    @property
    def contract(self):
        """
        Gets the contract of this ApiFilter.

        :return: The contract of this ApiFilter.
        :rtype: str
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """
        Sets the contract of this ApiFilter.

        :param contract: The contract of this ApiFilter.
        :type: str
        """

        self._contract = contract

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
