# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BookingChangeRQ(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'echo_token': 'str',
        'booking_id': 'str',
        'mode': 'str',
        'language': 'str',
        'booking': 'ApiBooking'
    }

    attribute_map = {
        'echo_token': 'echoToken',
        'booking_id': 'bookingId',
        'mode': 'mode',
        'language': 'language',
        'booking': 'booking'
    }

    def __init__(self, echo_token=None, booking_id=None, mode=None, language=None, booking=None):
        """
        BookingChangeRQ - a model defined in Swagger
        """

        self._echo_token = None
        self._booking_id = None
        self._mode = None
        self._language = None
        self._booking = None

        if echo_token is not None:
          self.echo_token = echo_token
        self.booking_id = booking_id
        self.mode = mode
        if language is not None:
          self.language = language
        self.booking = booking

    @property
    def echo_token(self):
        """
        Gets the echo_token of this BookingChangeRQ.

        :return: The echo_token of this BookingChangeRQ.
        :rtype: str
        """
        return self._echo_token

    @echo_token.setter
    def echo_token(self, echo_token):
        """
        Sets the echo_token of this BookingChangeRQ.

        :param echo_token: The echo_token of this BookingChangeRQ.
        :type: str
        """

        self._echo_token = echo_token

    @property
    def booking_id(self):
        """
        Gets the booking_id of this BookingChangeRQ.

        :return: The booking_id of this BookingChangeRQ.
        :rtype: str
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id):
        """
        Sets the booking_id of this BookingChangeRQ.

        :param booking_id: The booking_id of this BookingChangeRQ.
        :type: str
        """
        if booking_id is None:
            raise ValueError("Invalid value for `booking_id`, must not be `None`")

        self._booking_id = booking_id

    @property
    def mode(self):
        """
        Gets the mode of this BookingChangeRQ.

        :return: The mode of this BookingChangeRQ.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this BookingChangeRQ.

        :param mode: The mode of this BookingChangeRQ.
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")
        allowed_values = ["SIMULATION", "UPDATE"]
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def language(self):
        """
        Gets the language of this BookingChangeRQ.

        :return: The language of this BookingChangeRQ.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this BookingChangeRQ.

        :param language: The language of this BookingChangeRQ.
        :type: str
        """

        self._language = language

    @property
    def booking(self):
        """
        Gets the booking of this BookingChangeRQ.

        :return: The booking of this BookingChangeRQ.
        :rtype: ApiBooking
        """
        return self._booking

    @booking.setter
    def booking(self, booking):
        """
        Sets the booking of this BookingChangeRQ.

        :param booking: The booking of this BookingChangeRQ.
        :type: ApiBooking
        """
        if booking is None:
            raise ValueError("Invalid value for `booking`, must not be `None`")

        self._booking = booking

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BookingChangeRQ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
