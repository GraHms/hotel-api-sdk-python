# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiTaxes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_included': 'bool',
        'tax': 'list[ApiTax]'
    }

    attribute_map = {
        'all_included': 'allIncluded',
        'tax': 'tax'
    }

    def __init__(self, all_included=False, tax=None):
        """
        ApiTaxes - a model defined in Swagger
        """

        self._all_included = None
        self._tax = None

        if all_included is not None:
          self.all_included = all_included
        if tax is not None:
          self.tax = tax

    @property
    def all_included(self):
        """
        Gets the all_included of this ApiTaxes.

        :return: The all_included of this ApiTaxes.
        :rtype: bool
        """
        return self._all_included

    @all_included.setter
    def all_included(self, all_included):
        """
        Sets the all_included of this ApiTaxes.

        :param all_included: The all_included of this ApiTaxes.
        :type: bool
        """

        self._all_included = all_included

    @property
    def tax(self):
        """
        Gets the tax of this ApiTaxes.

        :return: The tax of this ApiTaxes.
        :rtype: list[ApiTax]
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this ApiTaxes.

        :param tax: The tax of this ApiTaxes.
        :type: list[ApiTax]
        """

        self._tax = tax

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiTaxes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
