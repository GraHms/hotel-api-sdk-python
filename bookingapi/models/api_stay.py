# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiStay(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_in': 'date',
        'check_out': 'date',
        'shift_days': 'int',
        'allow_only_shift': 'bool'
    }

    attribute_map = {
        'check_in': 'checkIn',
        'check_out': 'checkOut',
        'shift_days': 'shiftDays',
        'allow_only_shift': 'allowOnlyShift'
    }

    def __init__(self, check_in=None, check_out=None, shift_days=None, allow_only_shift=False):
        """
        ApiStay - a model defined in Swagger
        """

        self._check_in = None
        self._check_out = None
        self._shift_days = None
        self._allow_only_shift = None

        self.check_in = check_in
        self.check_out = check_out
        if shift_days is not None:
          self.shift_days = shift_days
        if allow_only_shift is not None:
          self.allow_only_shift = allow_only_shift

    @property
    def check_in(self):
        """
        Gets the check_in of this ApiStay.
        Check-in date

        :return: The check_in of this ApiStay.
        :rtype: date
        """
        return self._check_in

    @check_in.setter
    def check_in(self, check_in):
        """
        Sets the check_in of this ApiStay.
        Check-in date

        :param check_in: The check_in of this ApiStay.
        :type: date
        """
        if check_in is None:
            raise ValueError("Invalid value for `check_in`, must not be `None`")

        self._check_in = check_in

    @property
    def check_out(self):
        """
        Gets the check_out of this ApiStay.
        Check-out date

        :return: The check_out of this ApiStay.
        :rtype: date
        """
        return self._check_out

    @check_out.setter
    def check_out(self, check_out):
        """
        Sets the check_out of this ApiStay.
        Check-out date

        :param check_out: The check_out of this ApiStay.
        :type: date
        """
        if check_out is None:
            raise ValueError("Invalid value for `check_out`, must not be `None`")

        self._check_out = check_out

    @property
    def shift_days(self):
        """
        Gets the shift_days of this ApiStay.

        :return: The shift_days of this ApiStay.
        :rtype: int
        """
        return self._shift_days

    @shift_days.setter
    def shift_days(self, shift_days):
        """
        Sets the shift_days of this ApiStay.

        :param shift_days: The shift_days of this ApiStay.
        :type: int
        """
        if shift_days is not None and shift_days > 5:
            raise ValueError("Invalid value for `shift_days`, must be a value less than or equal to `5`")
        if shift_days is not None and shift_days < 1:
            raise ValueError("Invalid value for `shift_days`, must be a value greater than or equal to `1`")

        self._shift_days = shift_days

    @property
    def allow_only_shift(self):
        """
        Gets the allow_only_shift of this ApiStay.

        :return: The allow_only_shift of this ApiStay.
        :rtype: bool
        """
        return self._allow_only_shift

    @allow_only_shift.setter
    def allow_only_shift(self, allow_only_shift):
        """
        Sets the allow_only_shift of this ApiStay.

        :param allow_only_shift: The allow_only_shift of this ApiStay.
        :type: bool
        """

        self._allow_only_shift = allow_only_shift

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiStay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
