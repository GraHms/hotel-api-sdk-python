# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiRate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rate_key': 'str',
        'rate_class': 'str',
        'rate_type': 'str',
        'net': 'float',
        'discount': 'float',
        'discount_pct': 'float',
        'selling_rate': 'float',
        'hotel_selling_rate': 'float',
        'amount': 'float',
        'hotel_currency': 'str',
        'hotel_mandatory': 'bool',
        'allotment': 'int',
        'commission': 'float',
        'commission_vat': 'float',
        'commission_pct': 'float',
        'cost': 'ApiCost',
        'rate_comments_id': 'str',
        'rate_comments': 'str',
        'payment_type': 'str',
        'packaging': 'bool',
        'board_code': 'str',
        'board_name': 'str',
        'rate_break_down': 'ApiRateBreakDown',
        'rooms': 'int',
        'adults': 'int',
        'children': 'int',
        'children_ages': 'str',
        'rateup': 'float',
        'comment': 'list[ApiVoucherComment]',
        'cancellation_policy': 'list[ApiCancellationPolicy]',
        'taxes': 'ApiTaxes',
        'promotion': 'list[ApiPromotion]',
        'offer': 'list[ApiOffer]',
        'shift_rate': 'list[ApiShiftRate]',
        'daily_rate': 'list[ApiDailyRate]'
    }

    attribute_map = {
        'rate_key': 'rateKey',
        'rate_class': 'rateClass',
        'rate_type': 'rateType',
        'net': 'net',
        'discount': 'discount',
        'discount_pct': 'discountPCT',
        'selling_rate': 'sellingRate',
        'hotel_selling_rate': 'hotelSellingRate',
        'amount': 'amount',
        'hotel_currency': 'hotelCurrency',
        'hotel_mandatory': 'hotelMandatory',
        'allotment': 'allotment',
        'commission': 'commission',
        'commission_vat': 'commissionVAT',
        'commission_pct': 'commissionPCT',
        'cost': 'cost',
        'rate_comments_id': 'rateCommentsId',
        'rate_comments': 'rateComments',
        'payment_type': 'paymentType',
        'packaging': 'packaging',
        'board_code': 'boardCode',
        'board_name': 'boardName',
        'rate_break_down': 'rateBreakDown',
        'rooms': 'rooms',
        'adults': 'adults',
        'children': 'children',
        'children_ages': 'childrenAges',
        'rateup': 'rateup',
        'comment': 'comment',
        'cancellation_policy': 'cancellationPolicy',
        'taxes': 'taxes',
        'promotion': 'promotion',
        'offer': 'offer',
        'shift_rate': 'shiftRate',
        'daily_rate': 'dailyRate'
    }

    def __init__(self, rate_key=None, rate_class=None, rate_type=None, net=None, discount=None, discount_pct=None, selling_rate=None, hotel_selling_rate=None, amount=None, hotel_currency=None, hotel_mandatory=False, allotment=None, commission=None, commission_vat=None, commission_pct=None, cost=None, rate_comments_id=None, rate_comments=None, payment_type=None, packaging=False, board_code=None, board_name=None, rate_break_down=None, rooms=None, adults=None, children=None, children_ages=None, rateup=None, comment=None, cancellation_policy=None, taxes=None, promotion=None, offer=None, shift_rate=None, daily_rate=None):
        """
        ApiRate - a model defined in Swagger
        """

        self._rate_key = None
        self._rate_class = None
        self._rate_type = None
        self._net = None
        self._discount = None
        self._discount_pct = None
        self._selling_rate = None
        self._hotel_selling_rate = None
        self._amount = None
        self._hotel_currency = None
        self._hotel_mandatory = None
        self._allotment = None
        self._commission = None
        self._commission_vat = None
        self._commission_pct = None
        self._cost = None
        self._rate_comments_id = None
        self._rate_comments = None
        self._payment_type = None
        self._packaging = None
        self._board_code = None
        self._board_name = None
        self._rate_break_down = None
        self._rooms = None
        self._adults = None
        self._children = None
        self._children_ages = None
        self._rateup = None
        self._comment = None
        self._cancellation_policy = None
        self._taxes = None
        self._promotion = None
        self._offer = None
        self._shift_rate = None
        self._daily_rate = None

        if rate_key is not None:
          self.rate_key = rate_key
        if rate_class is not None:
          self.rate_class = rate_class
        if rate_type is not None:
          self.rate_type = rate_type
        if net is not None:
          self.net = net
        if discount is not None:
          self.discount = discount
        if discount_pct is not None:
          self.discount_pct = discount_pct
        if selling_rate is not None:
          self.selling_rate = selling_rate
        if hotel_selling_rate is not None:
          self.hotel_selling_rate = hotel_selling_rate
        if amount is not None:
          self.amount = amount
        if hotel_currency is not None:
          self.hotel_currency = hotel_currency
        if hotel_mandatory is not None:
          self.hotel_mandatory = hotel_mandatory
        if allotment is not None:
          self.allotment = allotment
        if commission is not None:
          self.commission = commission
        if commission_vat is not None:
          self.commission_vat = commission_vat
        if commission_pct is not None:
          self.commission_pct = commission_pct
        if cost is not None:
          self.cost = cost
        if rate_comments_id is not None:
          self.rate_comments_id = rate_comments_id
        if rate_comments is not None:
          self.rate_comments = rate_comments
        if payment_type is not None:
          self.payment_type = payment_type
        if packaging is not None:
          self.packaging = packaging
        if board_code is not None:
          self.board_code = board_code
        if board_name is not None:
          self.board_name = board_name
        if rate_break_down is not None:
          self.rate_break_down = rate_break_down
        if rooms is not None:
          self.rooms = rooms
        if adults is not None:
          self.adults = adults
        if children is not None:
          self.children = children
        if children_ages is not None:
          self.children_ages = children_ages
        if rateup is not None:
          self.rateup = rateup
        if comment is not None:
          self.comment = comment
        if cancellation_policy is not None:
          self.cancellation_policy = cancellation_policy
        if taxes is not None:
          self.taxes = taxes
        if promotion is not None:
          self.promotion = promotion
        if offer is not None:
          self.offer = offer
        if shift_rate is not None:
          self.shift_rate = shift_rate
        if daily_rate is not None:
          self.daily_rate = daily_rate

    @property
    def rate_key(self):
        """
        Gets the rate_key of this ApiRate.

        :return: The rate_key of this ApiRate.
        :rtype: str
        """
        return self._rate_key

    @rate_key.setter
    def rate_key(self, rate_key):
        """
        Sets the rate_key of this ApiRate.

        :param rate_key: The rate_key of this ApiRate.
        :type: str
        """

        self._rate_key = rate_key

    @property
    def rate_class(self):
        """
        Gets the rate_class of this ApiRate.

        :return: The rate_class of this ApiRate.
        :rtype: str
        """
        return self._rate_class

    @rate_class.setter
    def rate_class(self, rate_class):
        """
        Sets the rate_class of this ApiRate.

        :param rate_class: The rate_class of this ApiRate.
        :type: str
        """

        self._rate_class = rate_class

    @property
    def rate_type(self):
        """
        Gets the rate_type of this ApiRate.

        :return: The rate_type of this ApiRate.
        :rtype: str
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """
        Sets the rate_type of this ApiRate.

        :param rate_type: The rate_type of this ApiRate.
        :type: str
        """
        allowed_values = ["BOOKABLE", "RECHECK"]
        if rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rate_type` ({0}), must be one of {1}"
                .format(rate_type, allowed_values)
            )

        self._rate_type = rate_type

    @property
    def net(self):
        """
        Gets the net of this ApiRate.

        :return: The net of this ApiRate.
        :rtype: float
        """
        return self._net

    @net.setter
    def net(self, net):
        """
        Sets the net of this ApiRate.

        :param net: The net of this ApiRate.
        :type: float
        """

        self._net = net

    @property
    def discount(self):
        """
        Gets the discount of this ApiRate.

        :return: The discount of this ApiRate.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this ApiRate.

        :param discount: The discount of this ApiRate.
        :type: float
        """

        self._discount = discount

    @property
    def discount_pct(self):
        """
        Gets the discount_pct of this ApiRate.

        :return: The discount_pct of this ApiRate.
        :rtype: float
        """
        return self._discount_pct

    @discount_pct.setter
    def discount_pct(self, discount_pct):
        """
        Sets the discount_pct of this ApiRate.

        :param discount_pct: The discount_pct of this ApiRate.
        :type: float
        """

        self._discount_pct = discount_pct

    @property
    def selling_rate(self):
        """
        Gets the selling_rate of this ApiRate.

        :return: The selling_rate of this ApiRate.
        :rtype: float
        """
        return self._selling_rate

    @selling_rate.setter
    def selling_rate(self, selling_rate):
        """
        Sets the selling_rate of this ApiRate.

        :param selling_rate: The selling_rate of this ApiRate.
        :type: float
        """

        self._selling_rate = selling_rate

    @property
    def hotel_selling_rate(self):
        """
        Gets the hotel_selling_rate of this ApiRate.

        :return: The hotel_selling_rate of this ApiRate.
        :rtype: float
        """
        return self._hotel_selling_rate

    @hotel_selling_rate.setter
    def hotel_selling_rate(self, hotel_selling_rate):
        """
        Sets the hotel_selling_rate of this ApiRate.

        :param hotel_selling_rate: The hotel_selling_rate of this ApiRate.
        :type: float
        """

        self._hotel_selling_rate = hotel_selling_rate

    @property
    def amount(self):
        """
        Gets the amount of this ApiRate.

        :return: The amount of this ApiRate.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this ApiRate.

        :param amount: The amount of this ApiRate.
        :type: float
        """

        self._amount = amount

    @property
    def hotel_currency(self):
        """
        Gets the hotel_currency of this ApiRate.

        :return: The hotel_currency of this ApiRate.
        :rtype: str
        """
        return self._hotel_currency

    @hotel_currency.setter
    def hotel_currency(self, hotel_currency):
        """
        Sets the hotel_currency of this ApiRate.

        :param hotel_currency: The hotel_currency of this ApiRate.
        :type: str
        """

        self._hotel_currency = hotel_currency

    @property
    def hotel_mandatory(self):
        """
        Gets the hotel_mandatory of this ApiRate.

        :return: The hotel_mandatory of this ApiRate.
        :rtype: bool
        """
        return self._hotel_mandatory

    @hotel_mandatory.setter
    def hotel_mandatory(self, hotel_mandatory):
        """
        Sets the hotel_mandatory of this ApiRate.

        :param hotel_mandatory: The hotel_mandatory of this ApiRate.
        :type: bool
        """

        self._hotel_mandatory = hotel_mandatory

    @property
    def allotment(self):
        """
        Gets the allotment of this ApiRate.

        :return: The allotment of this ApiRate.
        :rtype: int
        """
        return self._allotment

    @allotment.setter
    def allotment(self, allotment):
        """
        Sets the allotment of this ApiRate.

        :param allotment: The allotment of this ApiRate.
        :type: int
        """

        self._allotment = allotment

    @property
    def commission(self):
        """
        Gets the commission of this ApiRate.

        :return: The commission of this ApiRate.
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """
        Sets the commission of this ApiRate.

        :param commission: The commission of this ApiRate.
        :type: float
        """

        self._commission = commission

    @property
    def commission_vat(self):
        """
        Gets the commission_vat of this ApiRate.

        :return: The commission_vat of this ApiRate.
        :rtype: float
        """
        return self._commission_vat

    @commission_vat.setter
    def commission_vat(self, commission_vat):
        """
        Sets the commission_vat of this ApiRate.

        :param commission_vat: The commission_vat of this ApiRate.
        :type: float
        """

        self._commission_vat = commission_vat

    @property
    def commission_pct(self):
        """
        Gets the commission_pct of this ApiRate.

        :return: The commission_pct of this ApiRate.
        :rtype: float
        """
        return self._commission_pct

    @commission_pct.setter
    def commission_pct(self, commission_pct):
        """
        Sets the commission_pct of this ApiRate.

        :param commission_pct: The commission_pct of this ApiRate.
        :type: float
        """

        self._commission_pct = commission_pct

    @property
    def cost(self):
        """
        Gets the cost of this ApiRate.

        :return: The cost of this ApiRate.
        :rtype: ApiCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this ApiRate.

        :param cost: The cost of this ApiRate.
        :type: ApiCost
        """

        self._cost = cost

    @property
    def rate_comments_id(self):
        """
        Gets the rate_comments_id of this ApiRate.

        :return: The rate_comments_id of this ApiRate.
        :rtype: str
        """
        return self._rate_comments_id

    @rate_comments_id.setter
    def rate_comments_id(self, rate_comments_id):
        """
        Sets the rate_comments_id of this ApiRate.

        :param rate_comments_id: The rate_comments_id of this ApiRate.
        :type: str
        """

        self._rate_comments_id = rate_comments_id

    @property
    def rate_comments(self):
        """
        Gets the rate_comments of this ApiRate.

        :return: The rate_comments of this ApiRate.
        :rtype: str
        """
        return self._rate_comments

    @rate_comments.setter
    def rate_comments(self, rate_comments):
        """
        Sets the rate_comments of this ApiRate.

        :param rate_comments: The rate_comments of this ApiRate.
        :type: str
        """

        self._rate_comments = rate_comments

    @property
    def payment_type(self):
        """
        Gets the payment_type of this ApiRate.

        :return: The payment_type of this ApiRate.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """
        Sets the payment_type of this ApiRate.

        :param payment_type: The payment_type of this ApiRate.
        :type: str
        """
        allowed_values = ["AT_HOTEL", "AT_WEB", "BOTH"]
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def packaging(self):
        """
        Gets the packaging of this ApiRate.

        :return: The packaging of this ApiRate.
        :rtype: bool
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """
        Sets the packaging of this ApiRate.

        :param packaging: The packaging of this ApiRate.
        :type: bool
        """

        self._packaging = packaging

    @property
    def board_code(self):
        """
        Gets the board_code of this ApiRate.

        :return: The board_code of this ApiRate.
        :rtype: str
        """
        return self._board_code

    @board_code.setter
    def board_code(self, board_code):
        """
        Sets the board_code of this ApiRate.

        :param board_code: The board_code of this ApiRate.
        :type: str
        """

        self._board_code = board_code

    @property
    def board_name(self):
        """
        Gets the board_name of this ApiRate.

        :return: The board_name of this ApiRate.
        :rtype: str
        """
        return self._board_name

    @board_name.setter
    def board_name(self, board_name):
        """
        Sets the board_name of this ApiRate.

        :param board_name: The board_name of this ApiRate.
        :type: str
        """

        self._board_name = board_name

    @property
    def rate_break_down(self):
        """
        Gets the rate_break_down of this ApiRate.

        :return: The rate_break_down of this ApiRate.
        :rtype: ApiRateBreakDown
        """
        return self._rate_break_down

    @rate_break_down.setter
    def rate_break_down(self, rate_break_down):
        """
        Sets the rate_break_down of this ApiRate.

        :param rate_break_down: The rate_break_down of this ApiRate.
        :type: ApiRateBreakDown
        """

        self._rate_break_down = rate_break_down

    @property
    def rooms(self):
        """
        Gets the rooms of this ApiRate.

        :return: The rooms of this ApiRate.
        :rtype: int
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """
        Sets the rooms of this ApiRate.

        :param rooms: The rooms of this ApiRate.
        :type: int
        """

        self._rooms = rooms

    @property
    def adults(self):
        """
        Gets the adults of this ApiRate.

        :return: The adults of this ApiRate.
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """
        Sets the adults of this ApiRate.

        :param adults: The adults of this ApiRate.
        :type: int
        """

        self._adults = adults

    @property
    def children(self):
        """
        Gets the children of this ApiRate.

        :return: The children of this ApiRate.
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this ApiRate.

        :param children: The children of this ApiRate.
        :type: int
        """

        self._children = children

    @property
    def children_ages(self):
        """
        Gets the children_ages of this ApiRate.

        :return: The children_ages of this ApiRate.
        :rtype: str
        """
        return self._children_ages

    @children_ages.setter
    def children_ages(self, children_ages):
        """
        Sets the children_ages of this ApiRate.

        :param children_ages: The children_ages of this ApiRate.
        :type: str
        """

        self._children_ages = children_ages

    @property
    def rateup(self):
        """
        Gets the rateup of this ApiRate.

        :return: The rateup of this ApiRate.
        :rtype: float
        """
        return self._rateup

    @rateup.setter
    def rateup(self, rateup):
        """
        Sets the rateup of this ApiRate.

        :param rateup: The rateup of this ApiRate.
        :type: float
        """

        self._rateup = rateup

    @property
    def comment(self):
        """
        Gets the comment of this ApiRate.

        :return: The comment of this ApiRate.
        :rtype: list[ApiVoucherComment]
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this ApiRate.

        :param comment: The comment of this ApiRate.
        :type: list[ApiVoucherComment]
        """

        self._comment = comment

    @property
    def cancellation_policy(self):
        """
        Gets the cancellation_policy of this ApiRate.

        :return: The cancellation_policy of this ApiRate.
        :rtype: list[ApiCancellationPolicy]
        """
        return self._cancellation_policy

    @cancellation_policy.setter
    def cancellation_policy(self, cancellation_policy):
        """
        Sets the cancellation_policy of this ApiRate.

        :param cancellation_policy: The cancellation_policy of this ApiRate.
        :type: list[ApiCancellationPolicy]
        """

        self._cancellation_policy = cancellation_policy

    @property
    def taxes(self):
        """
        Gets the taxes of this ApiRate.

        :return: The taxes of this ApiRate.
        :rtype: ApiTaxes
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """
        Sets the taxes of this ApiRate.

        :param taxes: The taxes of this ApiRate.
        :type: ApiTaxes
        """

        self._taxes = taxes

    @property
    def promotion(self):
        """
        Gets the promotion of this ApiRate.

        :return: The promotion of this ApiRate.
        :rtype: list[ApiPromotion]
        """
        return self._promotion

    @promotion.setter
    def promotion(self, promotion):
        """
        Sets the promotion of this ApiRate.

        :param promotion: The promotion of this ApiRate.
        :type: list[ApiPromotion]
        """

        self._promotion = promotion

    @property
    def offer(self):
        """
        Gets the offer of this ApiRate.

        :return: The offer of this ApiRate.
        :rtype: list[ApiOffer]
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """
        Sets the offer of this ApiRate.

        :param offer: The offer of this ApiRate.
        :type: list[ApiOffer]
        """

        self._offer = offer

    @property
    def shift_rate(self):
        """
        Gets the shift_rate of this ApiRate.

        :return: The shift_rate of this ApiRate.
        :rtype: list[ApiShiftRate]
        """
        return self._shift_rate

    @shift_rate.setter
    def shift_rate(self, shift_rate):
        """
        Sets the shift_rate of this ApiRate.

        :param shift_rate: The shift_rate of this ApiRate.
        :type: list[ApiShiftRate]
        """

        self._shift_rate = shift_rate

    @property
    def daily_rate(self):
        """
        Gets the daily_rate of this ApiRate.

        :return: The daily_rate of this ApiRate.
        :rtype: list[ApiDailyRate]
        """
        return self._daily_rate

    @daily_rate.setter
    def daily_rate(self, daily_rate):
        """
        Sets the daily_rate of this ApiRate.

        :param daily_rate: The daily_rate of this ApiRate.
        :type: list[ApiDailyRate]
        """

        self._daily_rate = daily_rate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
