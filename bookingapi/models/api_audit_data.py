# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiAuditData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'process_time': 'str',
        'timestamp': 'str',
        'request_host': 'str',
        'server_id': 'str',
        'environment': 'str',
        'release': 'str',
        'token': 'str'
    }

    attribute_map = {
        'process_time': 'processTime',
        'timestamp': 'timestamp',
        'request_host': 'requestHost',
        'server_id': 'serverId',
        'environment': 'environment',
        'release': 'release',
        'token': 'token'
    }

    def __init__(self, process_time=None, timestamp=None, request_host=None, server_id=None, environment=None, release=None, token=None):
        """
        ApiAuditData - a model defined in Swagger
        """

        self._process_time = None
        self._timestamp = None
        self._request_host = None
        self._server_id = None
        self._environment = None
        self._release = None
        self._token = None

        if process_time is not None:
          self.process_time = process_time
        if timestamp is not None:
          self.timestamp = timestamp
        if request_host is not None:
          self.request_host = request_host
        if server_id is not None:
          self.server_id = server_id
        if environment is not None:
          self.environment = environment
        if release is not None:
          self.release = release
        if token is not None:
          self.token = token

    @property
    def process_time(self):
        """
        Gets the process_time of this ApiAuditData.

        :return: The process_time of this ApiAuditData.
        :rtype: str
        """
        return self._process_time

    @process_time.setter
    def process_time(self, process_time):
        """
        Sets the process_time of this ApiAuditData.

        :param process_time: The process_time of this ApiAuditData.
        :type: str
        """

        self._process_time = process_time

    @property
    def timestamp(self):
        """
        Gets the timestamp of this ApiAuditData.

        :return: The timestamp of this ApiAuditData.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this ApiAuditData.

        :param timestamp: The timestamp of this ApiAuditData.
        :type: str
        """

        self._timestamp = timestamp

    @property
    def request_host(self):
        """
        Gets the request_host of this ApiAuditData.

        :return: The request_host of this ApiAuditData.
        :rtype: str
        """
        return self._request_host

    @request_host.setter
    def request_host(self, request_host):
        """
        Sets the request_host of this ApiAuditData.

        :param request_host: The request_host of this ApiAuditData.
        :type: str
        """

        self._request_host = request_host

    @property
    def server_id(self):
        """
        Gets the server_id of this ApiAuditData.

        :return: The server_id of this ApiAuditData.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """
        Sets the server_id of this ApiAuditData.

        :param server_id: The server_id of this ApiAuditData.
        :type: str
        """

        self._server_id = server_id

    @property
    def environment(self):
        """
        Gets the environment of this ApiAuditData.

        :return: The environment of this ApiAuditData.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this ApiAuditData.

        :param environment: The environment of this ApiAuditData.
        :type: str
        """

        self._environment = environment

    @property
    def release(self):
        """
        Gets the release of this ApiAuditData.

        :return: The release of this ApiAuditData.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """
        Sets the release of this ApiAuditData.

        :param release: The release of this ApiAuditData.
        :type: str
        """

        self._release = release

    @property
    def token(self):
        """
        Gets the token of this ApiAuditData.

        :return: The token of this ApiAuditData.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this ApiAuditData.

        :param token: The token of this ApiAuditData.
        :type: str
        """

        self._token = token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiAuditData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
