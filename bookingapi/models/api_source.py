# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel': 'str',
        'device': 'str',
        'device_info': 'str'
    }

    attribute_map = {
        'channel': 'channel',
        'device': 'device',
        'device_info': 'deviceInfo'
    }

    def __init__(self, channel=None, device=None, device_info=None):
        """
        ApiSource - a model defined in Swagger
        """

        self._channel = None
        self._device = None
        self._device_info = None

        self.channel = channel
        self.device = device
        if device_info is not None:
          self.device_info = device_info

    @property
    def channel(self):
        """
        Gets the channel of this ApiSource.

        :return: The channel of this ApiSource.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """
        Sets the channel of this ApiSource.

        :param channel: The channel of this ApiSource.
        :type: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")
        allowed_values = ["B2B", "B2C", "META", "NEWSLETTER"]
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def device(self):
        """
        Gets the device of this ApiSource.

        :return: The device of this ApiSource.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this ApiSource.

        :param device: The device of this ApiSource.
        :type: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")
        allowed_values = ["MOBILE", "WEB", "TABLET"]
        if device not in allowed_values:
            raise ValueError(
                "Invalid value for `device` ({0}), must be one of {1}"
                .format(device, allowed_values)
            )

        self._device = device

    @property
    def device_info(self):
        """
        Gets the device_info of this ApiSource.

        :return: The device_info of this ApiSource.
        :rtype: str
        """
        return self._device_info

    @device_info.setter
    def device_info(self, device_info):
        """
        Sets the device_info of this ApiSource.

        :param device_info: The device_info of this ApiSource.
        :type: str
        """
        if device_info is not None and len(device_info) > 200:
            raise ValueError("Invalid value for `device_info`, length must be less than or equal to `200`")
        if device_info is not None and len(device_info) < 0:
            raise ValueError("Invalid value for `device_info`, length must be greater than or equal to `0`")

        self._device_info = device_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
