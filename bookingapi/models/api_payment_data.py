# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiPaymentData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_card': 'ApiPaymentCard',
        'contact_data': 'ApiPaymentContactData',
        'billing_address': 'ApiBillingAddress',
        'web_partner': 'int',
        'device': 'ApiBookingDevice'
    }

    attribute_map = {
        'payment_card': 'paymentCard',
        'contact_data': 'contactData',
        'billing_address': 'billingAddress',
        'web_partner': 'webPartner',
        'device': 'device'
    }

    def __init__(self, payment_card=None, contact_data=None, billing_address=None, web_partner=None, device=None):
        """
        ApiPaymentData - a model defined in Swagger
        """

        self._payment_card = None
        self._contact_data = None
        self._billing_address = None
        self._web_partner = None
        self._device = None

        self.payment_card = payment_card
        self.contact_data = contact_data
        if billing_address is not None:
          self.billing_address = billing_address
        if web_partner is not None:
          self.web_partner = web_partner
        if device is not None:
          self.device = device

    @property
    def payment_card(self):
        """
        Gets the payment_card of this ApiPaymentData.

        :return: The payment_card of this ApiPaymentData.
        :rtype: ApiPaymentCard
        """
        return self._payment_card

    @payment_card.setter
    def payment_card(self, payment_card):
        """
        Sets the payment_card of this ApiPaymentData.

        :param payment_card: The payment_card of this ApiPaymentData.
        :type: ApiPaymentCard
        """
        if payment_card is None:
            raise ValueError("Invalid value for `payment_card`, must not be `None`")

        self._payment_card = payment_card

    @property
    def contact_data(self):
        """
        Gets the contact_data of this ApiPaymentData.

        :return: The contact_data of this ApiPaymentData.
        :rtype: ApiPaymentContactData
        """
        return self._contact_data

    @contact_data.setter
    def contact_data(self, contact_data):
        """
        Sets the contact_data of this ApiPaymentData.

        :param contact_data: The contact_data of this ApiPaymentData.
        :type: ApiPaymentContactData
        """
        if contact_data is None:
            raise ValueError("Invalid value for `contact_data`, must not be `None`")

        self._contact_data = contact_data

    @property
    def billing_address(self):
        """
        Gets the billing_address of this ApiPaymentData.

        :return: The billing_address of this ApiPaymentData.
        :rtype: ApiBillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this ApiPaymentData.

        :param billing_address: The billing_address of this ApiPaymentData.
        :type: ApiBillingAddress
        """

        self._billing_address = billing_address

    @property
    def web_partner(self):
        """
        Gets the web_partner of this ApiPaymentData.

        :return: The web_partner of this ApiPaymentData.
        :rtype: int
        """
        return self._web_partner

    @web_partner.setter
    def web_partner(self, web_partner):
        """
        Sets the web_partner of this ApiPaymentData.

        :param web_partner: The web_partner of this ApiPaymentData.
        :type: int
        """

        self._web_partner = web_partner

    @property
    def device(self):
        """
        Gets the device of this ApiPaymentData.

        :return: The device of this ApiPaymentData.
        :rtype: ApiBookingDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this ApiPaymentData.

        :param device: The device of this ApiPaymentData.
        :type: ApiBookingDevice
        """

        self._device = device

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiPaymentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
