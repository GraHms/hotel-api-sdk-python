# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiTax(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'included': 'bool',
        'percent': 'float',
        'amount': 'float',
        'currency': 'str',
        'type': 'str',
        'client_amount': 'float',
        'client_currency': 'str'
    }

    attribute_map = {
        'included': 'included',
        'percent': 'percent',
        'amount': 'amount',
        'currency': 'currency',
        'type': 'type',
        'client_amount': 'clientAmount',
        'client_currency': 'clientCurrency'
    }

    def __init__(self, included=False, percent=None, amount=None, currency=None, type=None, client_amount=None, client_currency=None):
        """
        ApiTax - a model defined in Swagger
        """

        self._included = None
        self._percent = None
        self._amount = None
        self._currency = None
        self._type = None
        self._client_amount = None
        self._client_currency = None

        if included is not None:
          self.included = included
        if percent is not None:
          self.percent = percent
        if amount is not None:
          self.amount = amount
        if currency is not None:
          self.currency = currency
        if type is not None:
          self.type = type
        if client_amount is not None:
          self.client_amount = client_amount
        if client_currency is not None:
          self.client_currency = client_currency

    @property
    def included(self):
        """
        Gets the included of this ApiTax.

        :return: The included of this ApiTax.
        :rtype: bool
        """
        return self._included

    @included.setter
    def included(self, included):
        """
        Sets the included of this ApiTax.

        :param included: The included of this ApiTax.
        :type: bool
        """

        self._included = included

    @property
    def percent(self):
        """
        Gets the percent of this ApiTax.

        :return: The percent of this ApiTax.
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """
        Sets the percent of this ApiTax.

        :param percent: The percent of this ApiTax.
        :type: float
        """

        self._percent = percent

    @property
    def amount(self):
        """
        Gets the amount of this ApiTax.

        :return: The amount of this ApiTax.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this ApiTax.

        :param amount: The amount of this ApiTax.
        :type: float
        """

        self._amount = amount

    @property
    def currency(self):
        """
        Gets the currency of this ApiTax.

        :return: The currency of this ApiTax.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this ApiTax.

        :param currency: The currency of this ApiTax.
        :type: str
        """

        self._currency = currency

    @property
    def type(self):
        """
        Gets the type of this ApiTax.

        :return: The type of this ApiTax.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ApiTax.

        :param type: The type of this ApiTax.
        :type: str
        """
        allowed_values = ["TAX", "FEE"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def client_amount(self):
        """
        Gets the client_amount of this ApiTax.

        :return: The client_amount of this ApiTax.
        :rtype: float
        """
        return self._client_amount

    @client_amount.setter
    def client_amount(self, client_amount):
        """
        Sets the client_amount of this ApiTax.

        :param client_amount: The client_amount of this ApiTax.
        :type: float
        """

        self._client_amount = client_amount

    @property
    def client_currency(self):
        """
        Gets the client_currency of this ApiTax.

        :return: The client_currency of this ApiTax.
        :rtype: str
        """
        return self._client_currency

    @client_currency.setter
    def client_currency(self, client_currency):
        """
        Sets the client_currency of this ApiTax.

        :param client_currency: The client_currency of this ApiTax.
        :type: str
        """

        self._client_currency = client_currency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiTax):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
