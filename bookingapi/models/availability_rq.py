# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AvailabilityRQ(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'echo_token': 'str',
        'stay': 'ApiStay',
        'geolocation': 'ApiGeoLocation',
        'destination': 'ApiDestination',
        'filter': 'ApiFilter',
        'boards': 'ApiBoards',
        'rooms': 'ApiRooms',
        'daily_rate': 'bool',
        'source_market': 'str',
        'source': 'ApiSource',
        'aif_use': 'bool',
        'platform': 'int',
        'language': 'str',
        'occupancies': 'list[ApiOccupancy]',
        'keywords': 'ApiKeywordsFilter',
        'hotels': 'ApiHotelsFilter',
        'review': 'list[ApiReviewFilter]',
        'accommodation': 'list[str]'
    }

    attribute_map = {
        'echo_token': 'echoToken',
        'stay': 'stay',
        'geolocation': 'geolocation',
        'destination': 'destination',
        'filter': 'filter',
        'boards': 'boards',
        'rooms': 'rooms',
        'daily_rate': 'dailyRate',
        'source_market': 'sourceMarket',
        'source': 'source',
        'aif_use': 'aifUse',
        'platform': 'platform',
        'language': 'language',
        'occupancies': 'occupancies',
        'keywords': 'keywords',
        'hotels': 'hotels',
        'review': 'review',
        'accommodation': 'accommodation'
    }

    def __init__(self, echo_token=None, stay=None, geolocation=None, destination=None, filter=None, boards=None, rooms=None, daily_rate=False, source_market=None, source=None, aif_use=False, platform=None, language=None, occupancies=None, keywords=None, hotels=None, review=None, accommodation=None):
        """
        AvailabilityRQ - a model defined in Swagger
        """

        self._echo_token = None
        self._stay = None
        self._geolocation = None
        self._destination = None
        self._filter = None
        self._boards = None
        self._rooms = None
        self._daily_rate = None
        self._source_market = None
        self._source = None
        self._aif_use = None
        self._platform = None
        self._language = None
        self.occupancies = None
        self._keywords = None
        self._hotels = None
        self._review = None
        self._accommodation = None

        if echo_token is not None:
          self.echo_token = echo_token
        self.stay = stay
        if geolocation is not None:
          self.geolocation = geolocation
        if destination is not None:
          self.destination = destination
        if filter is not None:
          self.filter = filter
        if boards is not None:
          self.boards = boards
        if rooms is not None:
          self.rooms = rooms
        if daily_rate is not None:
          self.daily_rate = daily_rate
        if source_market is not None:
          self.source_market = source_market
        if source is not None:
          self.source = source
        if aif_use is not None:
          self.aif_use = aif_use
        if platform is not None:
          self.platform = platform
        if language is not None:
          self.language = language
        if occupancies is not None:
          self.occupancies = occupancies
        if keywords is not None:
          self.keywords = keywords
        if hotels is not None:
          self.hotels = hotels
        if review is not None:
          self.review = review
        if accommodation is not None:
          self.accommodation = accommodation

    @property
    def echo_token(self):
        """
        Gets the echo_token of this AvailabilityRQ.

        :return: The echo_token of this AvailabilityRQ.
        :rtype: str
        """
        return self._echo_token

    @echo_token.setter
    def echo_token(self, echo_token):
        """
        Sets the echo_token of this AvailabilityRQ.

        :param echo_token: The echo_token of this AvailabilityRQ.
        :type: str
        """

        self._echo_token = echo_token

    @property
    def stay(self):
        """
        Gets the stay of this AvailabilityRQ.
        Booking length of stay element

        :return: The stay of this AvailabilityRQ.
        :rtype: ApiStay
        """
        return self._stay

    @stay.setter
    def stay(self, stay):
        """
        Sets the stay of this AvailabilityRQ.
        Booking length of stay element

        :param stay: The stay of this AvailabilityRQ.
        :type: ApiStay
        """
        if stay is None:
            raise ValueError("Invalid value for `stay`, must not be `None`")

        self._stay = stay

    @property
    def geolocation(self):
        """
        Gets the geolocation of this AvailabilityRQ.

        :return: The geolocation of this AvailabilityRQ.
        :rtype: ApiGeoLocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """
        Sets the geolocation of this AvailabilityRQ.

        :param geolocation: The geolocation of this AvailabilityRQ.
        :type: ApiGeoLocation
        """

        self._geolocation = geolocation

    @property
    def destination(self):
        """
        Gets the destination of this AvailabilityRQ.

        :return: The destination of this AvailabilityRQ.
        :rtype: ApiDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this AvailabilityRQ.

        :param destination: The destination of this AvailabilityRQ.
        :type: ApiDestination
        """

        self._destination = destination

    @property
    def filter(self):
        """
        Gets the filter of this AvailabilityRQ.

        :return: The filter of this AvailabilityRQ.
        :rtype: ApiFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this AvailabilityRQ.

        :param filter: The filter of this AvailabilityRQ.
        :type: ApiFilter
        """

        self._filter = filter

    @property
    def boards(self):
        """
        Gets the boards of this AvailabilityRQ.

        :return: The boards of this AvailabilityRQ.
        :rtype: ApiBoards
        """
        return self._boards

    @boards.setter
    def boards(self, boards):
        """
        Sets the boards of this AvailabilityRQ.

        :param boards: The boards of this AvailabilityRQ.
        :type: ApiBoards
        """

        self._boards = boards

    @property
    def rooms(self):
        """
        Gets the rooms of this AvailabilityRQ.

        :return: The rooms of this AvailabilityRQ.
        :rtype: ApiRooms
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """
        Sets the rooms of this AvailabilityRQ.

        :param rooms: The rooms of this AvailabilityRQ.
        :type: ApiRooms
        """

        self._rooms = rooms

    @property
    def daily_rate(self):
        """
        Gets the daily_rate of this AvailabilityRQ.
        Displays daily price breakdown

        :return: The daily_rate of this AvailabilityRQ.
        :rtype: bool
        """
        return self._daily_rate

    @daily_rate.setter
    def daily_rate(self, daily_rate):
        """
        Sets the daily_rate of this AvailabilityRQ.
        Displays daily price breakdown

        :param daily_rate: The daily_rate of this AvailabilityRQ.
        :type: bool
        """

        self._daily_rate = daily_rate

    @property
    def source_market(self):
        """
        Gets the source_market of this AvailabilityRQ.

        :return: The source_market of this AvailabilityRQ.
        :rtype: str
        """
        return self._source_market

    @source_market.setter
    def source_market(self, source_market):
        """
        Sets the source_market of this AvailabilityRQ.

        :param source_market: The source_market of this AvailabilityRQ.
        :type: str
        """

        self._source_market = source_market

    @property
    def source(self):
        """
        Gets the source of this AvailabilityRQ.

        :return: The source of this AvailabilityRQ.
        :rtype: ApiSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this AvailabilityRQ.

        :param source: The source of this AvailabilityRQ.
        :type: ApiSource
        """

        self._source = source

    @property
    def aif_use(self):
        """
        Gets the aif_use of this AvailabilityRQ.

        :return: The aif_use of this AvailabilityRQ.
        :rtype: bool
        """
        return self._aif_use

    @aif_use.setter
    def aif_use(self, aif_use):
        """
        Sets the aif_use of this AvailabilityRQ.

        :param aif_use: The aif_use of this AvailabilityRQ.
        :type: bool
        """

        self._aif_use = aif_use

    @property
    def platform(self):
        """
        Gets the platform of this AvailabilityRQ.

        :return: The platform of this AvailabilityRQ.
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this AvailabilityRQ.

        :param platform: The platform of this AvailabilityRQ.
        :type: int
        """

        self._platform = platform

    @property
    def language(self):
        """
        Gets the language of this AvailabilityRQ.

        :return: The language of this AvailabilityRQ.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this AvailabilityRQ.

        :param language: The language of this AvailabilityRQ.
        :type: str
        """

        self._language = language

    @property
    def occupancies(self):
        """
        Gets the occupancies of this AvailabilityRQ.

        :return: The occupancies of this AvailabilityRQ.
        :rtype: list[ApiOccupancy]
        """
        return self._occupancies

    @occupancies.setter
    def occupancies(self, occupancies):
        """
        Sets the occupancies of this AvailabilityRQ.

        :param occupancies: The occupancies of this AvailabilityRQ.
        :type: list[ApiOccupancy]
        """

        self.occupancies = occupancies

    @property
    def keywords(self):
        """
        Gets the keywords of this AvailabilityRQ.

        :return: The keywords of this AvailabilityRQ.
        :rtype: ApiKeywordsFilter
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """
        Sets the keywords of this AvailabilityRQ.

        :param keywords: The keywords of this AvailabilityRQ.
        :type: ApiKeywordsFilter
        """

        self._keywords = keywords

    @property
    def hotels(self):
        """
        Gets the hotels of this AvailabilityRQ.

        :return: The hotels of this AvailabilityRQ.
        :rtype: ApiHotelsFilter
        """
        return self._hotels

    @hotels.setter
    def hotels(self, hotels):
        """
        Sets the hotels of this AvailabilityRQ.

        :param hotels: The hotels of this AvailabilityRQ.
        :type: ApiHotelsFilter
        """

        self._hotels = hotels

    @property
    def review(self):
        """
        Gets the review of this AvailabilityRQ.

        :return: The review of this AvailabilityRQ.
        :rtype: list[ApiReviewFilter]
        """
        return self._review

    @review.setter
    def review(self, review):
        """
        Sets the review of this AvailabilityRQ.

        :param review: The review of this AvailabilityRQ.
        :type: list[ApiReviewFilter]
        """

        self._review = review

    @property
    def accommodation(self):
        """
        Gets the accommodation of this AvailabilityRQ.

        :return: The accommodation of this AvailabilityRQ.
        :rtype: list[str]
        """
        return self._accommodation

    @accommodation.setter
    def accommodation(self, accommodation):
        """
        Sets the accommodation of this AvailabilityRQ.

        :param accommodation: The accommodation of this AvailabilityRQ.
        :type: list[str]
        """
        allowed_values = ["HOTEL", "APARTMENT", "RURAL", "HOSTEL", "APTHOTEL", "CAMPING", "HISTORIC", "PENDING", "RESORT", "HOMES"]
        if not set(accommodation).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `accommodation` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(accommodation)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._accommodation = accommodation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AvailabilityRQ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
