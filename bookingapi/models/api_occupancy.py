# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiOccupancy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rooms': 'int',
        'adults': 'int',
        'children': 'int',
        'pax': 'list[ApiPax]'
    }

    attribute_map = {
        'rooms': 'rooms',
        'adults': 'adults',
        'children': 'children',
        'pax': 'pax'
    }

    def __init__(self, rooms=None, adults=None, children=None, pax=None):
        """
        ApiOccupancy - a model defined in Swagger
        """

        self._rooms = None
        self._adults = None
        self._children = None
        self._pax = None

        self.rooms = rooms
        self.adults = adults
        self.children = children
        if pax is not None:
          self.pax = pax

    @property
    def rooms(self):
        """
        Gets the rooms of this ApiOccupancy.
        Number of rooms

        :return: The rooms of this ApiOccupancy.
        :rtype: int
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """
        Sets the rooms of this ApiOccupancy.
        Number of rooms

        :param rooms: The rooms of this ApiOccupancy.
        :type: int
        """
        if rooms is None:
            raise ValueError("Invalid value for `rooms`, must not be `None`")
        if rooms is not None and rooms < 1:
            raise ValueError("Invalid value for `rooms`, must be a value greater than or equal to `1`")

        self._rooms = rooms

    @property
    def adults(self):
        """
        Gets the adults of this ApiOccupancy.
        Number of adults

        :return: The adults of this ApiOccupancy.
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """
        Sets the adults of this ApiOccupancy.
        Number of adults

        :param adults: The adults of this ApiOccupancy.
        :type: int
        """
        if adults is None:
            raise ValueError("Invalid value for `adults`, must not be `None`")
        if adults is not None and adults < 1:
            raise ValueError("Invalid value for `adults`, must be a value greater than or equal to `1`")

        self._adults = adults

    @property
    def children(self):
        """
        Gets the children of this ApiOccupancy.
        Number of children

        :return: The children of this ApiOccupancy.
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this ApiOccupancy.
        Number of children

        :param children: The children of this ApiOccupancy.
        :type: int
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")
        if children is not None and children < 0:
            raise ValueError("Invalid value for `children`, must be a value greater than or equal to `0`")

        self._children = children

    @property
    def pax(self):
        """
        Gets the pax of this ApiOccupancy.
        Paxes element (mandatory when children are requested)

        :return: The pax of this ApiOccupancy.
        :rtype: list[ApiPax]
        """
        return self._pax

    @pax.setter
    def pax(self, pax):
        """
        Sets the pax of this ApiOccupancy.
        Paxes element (mandatory when children are requested)

        :param pax: The pax of this ApiOccupancy.
        :type: list[ApiPax]
        """

        self._pax = pax

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiOccupancy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
