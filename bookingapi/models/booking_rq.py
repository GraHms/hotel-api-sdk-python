# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BookingRQ(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'echo_token': 'str',
        'holder': 'ApiHolder',
        'payment_data': 'ApiPaymentData',
        'client_reference': 'str',
        'remark': 'str',
        'voucher': 'ApiVoucher',
        'language': 'str',
        'rooms': 'list[ApiBookingRoom]'
    }

    attribute_map = {
        'echo_token': 'echoToken',
        'holder': 'holder',
        'payment_data': 'paymentData',
        'client_reference': 'clientReference',
        'remark': 'remark',
        'voucher': 'voucher',
        'language': 'language',
        'rooms': 'rooms'
    }

    def __init__(self, echo_token=None, holder=None, payment_data=None, client_reference=None, remark=None, voucher=None, language=None, rooms=None):
        """
        BookingRQ - a model defined in Swagger
        """

        self._echo_token = None
        self._holder = None
        self._payment_data = None
        self._client_reference = None
        self._remark = None
        self._voucher = None
        self._language = None
        self._rooms = None

        if echo_token is not None:
          self.echo_token = echo_token
        self.holder = holder
        if payment_data is not None:
          self.payment_data = payment_data
        self.client_reference = client_reference
        if remark is not None:
          self.remark = remark
        if voucher is not None:
          self.voucher = voucher
        if language is not None:
          self.language = language
        self.rooms = rooms

    @property
    def echo_token(self):
        """
        Gets the echo_token of this BookingRQ.

        :return: The echo_token of this BookingRQ.
        :rtype: str
        """
        return self._echo_token

    @echo_token.setter
    def echo_token(self, echo_token):
        """
        Sets the echo_token of this BookingRQ.

        :param echo_token: The echo_token of this BookingRQ.
        :type: str
        """

        self._echo_token = echo_token

    @property
    def holder(self):
        """
        Gets the holder of this BookingRQ.

        :return: The holder of this BookingRQ.
        :rtype: ApiHolder
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """
        Sets the holder of this BookingRQ.

        :param holder: The holder of this BookingRQ.
        :type: ApiHolder
        """
        if holder is None:
            raise ValueError("Invalid value for `holder`, must not be `None`")

        self._holder = holder

    @property
    def payment_data(self):
        """
        Gets the payment_data of this BookingRQ.

        :return: The payment_data of this BookingRQ.
        :rtype: ApiPaymentData
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """
        Sets the payment_data of this BookingRQ.

        :param payment_data: The payment_data of this BookingRQ.
        :type: ApiPaymentData
        """

        self._payment_data = payment_data

    @property
    def client_reference(self):
        """
        Gets the client_reference of this BookingRQ.

        :return: The client_reference of this BookingRQ.
        :rtype: str
        """
        return self._client_reference

    @client_reference.setter
    def client_reference(self, client_reference):
        """
        Sets the client_reference of this BookingRQ.

        :param client_reference: The client_reference of this BookingRQ.
        :type: str
        """
        if client_reference is None:
            raise ValueError("Invalid value for `client_reference`, must not be `None`")
        if client_reference is not None and len(client_reference) > 20:
            raise ValueError("Invalid value for `client_reference`, length must be less than or equal to `20`")
        if client_reference is not None and len(client_reference) < 1:
            raise ValueError("Invalid value for `client_reference`, length must be greater than or equal to `1`")

        self._client_reference = client_reference

    @property
    def remark(self):
        """
        Gets the remark of this BookingRQ.

        :return: The remark of this BookingRQ.
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """
        Sets the remark of this BookingRQ.

        :param remark: The remark of this BookingRQ.
        :type: str
        """
        if remark is not None and len(remark) > 2000:
            raise ValueError("Invalid value for `remark`, length must be less than or equal to `2000`")
        if remark is not None and len(remark) < 0:
            raise ValueError("Invalid value for `remark`, length must be greater than or equal to `0`")

        self._remark = remark

    @property
    def voucher(self):
        """
        Gets the voucher of this BookingRQ.

        :return: The voucher of this BookingRQ.
        :rtype: ApiVoucher
        """
        return self._voucher

    @voucher.setter
    def voucher(self, voucher):
        """
        Sets the voucher of this BookingRQ.

        :param voucher: The voucher of this BookingRQ.
        :type: ApiVoucher
        """

        self._voucher = voucher

    @property
    def language(self):
        """
        Gets the language of this BookingRQ.

        :return: The language of this BookingRQ.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this BookingRQ.

        :param language: The language of this BookingRQ.
        :type: str
        """

        self._language = language

    @property
    def rooms(self):
        """
        Gets the rooms of this BookingRQ.

        :return: The rooms of this BookingRQ.
        :rtype: list[ApiBookingRoom]
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """
        Sets the room of this BookingRQ.

        :param rooms: The rooms of this BookingRQ.
        :type: list[ApiBookingRoom]
        """
        if rooms is None:
            raise ValueError("Invalid value for `rooms`, must not be `None`")

        self._rooms = rooms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BookingRQ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
