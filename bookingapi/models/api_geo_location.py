# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiGeoLocation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'longitude': 'float',
        'latitude': 'float',
        'radius': 'float',
        'unit': 'str',
        'secondary_latitude': 'float',
        'secondary_longitude': 'float'
    }

    attribute_map = {
        'longitude': 'longitude',
        'latitude': 'latitude',
        'radius': 'radius',
        'unit': 'unit',
        'secondary_latitude': 'secondaryLatitude',
        'secondary_longitude': 'secondaryLongitude'
    }

    def __init__(self, longitude=None, latitude=None, radius=None, unit=None, secondary_latitude=None, secondary_longitude=None):
        """
        ApiGeoLocation - a model defined in Swagger
        """

        self._longitude = None
        self._latitude = None
        self._radius = None
        self._unit = None
        self._secondary_latitude = None
        self._secondary_longitude = None

        self.longitude = longitude
        self.latitude = latitude
        if radius is not None:
          self.radius = radius
        if unit is not None:
          self.unit = unit
        if secondary_latitude is not None:
          self.secondary_latitude = secondary_latitude
        if secondary_longitude is not None:
          self.secondary_longitude = secondary_longitude

    @property
    def longitude(self):
        """
        Gets the longitude of this ApiGeoLocation.

        :return: The longitude of this ApiGeoLocation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this ApiGeoLocation.

        :param longitude: The longitude of this ApiGeoLocation.
        :type: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def latitude(self):
        """
        Gets the latitude of this ApiGeoLocation.

        :return: The latitude of this ApiGeoLocation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this ApiGeoLocation.

        :param latitude: The latitude of this ApiGeoLocation.
        :type: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def radius(self):
        """
        Gets the radius of this ApiGeoLocation.

        :return: The radius of this ApiGeoLocation.
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """
        Sets the radius of this ApiGeoLocation.

        :param radius: The radius of this ApiGeoLocation.
        :type: float
        """
        if radius is not None and radius > 200:
            raise ValueError("Invalid value for `radius`, must be a value less than or equal to `200`")

        self._radius = radius

    @property
    def unit(self):
        """
        Gets the unit of this ApiGeoLocation.

        :return: The unit of this ApiGeoLocation.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this ApiGeoLocation.

        :param unit: The unit of this ApiGeoLocation.
        :type: str
        """
        allowed_values = ["mi", "km"]
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def secondary_latitude(self):
        """
        Gets the secondary_latitude of this ApiGeoLocation.

        :return: The secondary_latitude of this ApiGeoLocation.
        :rtype: float
        """
        return self._secondary_latitude

    @secondary_latitude.setter
    def secondary_latitude(self, secondary_latitude):
        """
        Sets the secondary_latitude of this ApiGeoLocation.

        :param secondary_latitude: The secondary_latitude of this ApiGeoLocation.
        :type: float
        """

        self._secondary_latitude = secondary_latitude

    @property
    def secondary_longitude(self):
        """
        Gets the secondary_longitude of this ApiGeoLocation.

        :return: The secondary_longitude of this ApiGeoLocation.
        :rtype: float
        """
        return self._secondary_longitude

    @secondary_longitude.setter
    def secondary_longitude(self, secondary_longitude):
        """
        Sets the secondary_longitude of this ApiGeoLocation.

        :param secondary_longitude: The secondary_longitude of this ApiGeoLocation.
        :type: float
        """

        self._secondary_longitude = secondary_longitude

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiGeoLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
