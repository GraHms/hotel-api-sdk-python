# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiBoards(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'board': 'list[str]',
        'included': 'bool'
    }

    attribute_map = {
        'board': 'board',
        'included': 'included'
    }

    def __init__(self, board=None, included=False):
        """
        ApiBoards - a model defined in Swagger
        """

        self._board = None
        self._included = None

        self.board = board
        self.included = included

    @property
    def board(self):
        """
        Gets the board of this ApiBoards.

        :return: The board of this ApiBoards.
        :rtype: list[str]
        """
        return self._board

    @board.setter
    def board(self, board):
        """
        Sets the board of this ApiBoards.

        :param board: The board of this ApiBoards.
        :type: list[str]
        """
        if board is None:
            raise ValueError("Invalid value for `board`, must not be `None`")

        self._board = board

    @property
    def included(self):
        """
        Gets the included of this ApiBoards.

        :return: The included of this ApiBoards.
        :rtype: bool
        """
        return self._included

    @included.setter
    def included(self, included):
        """
        Sets the included of this ApiBoards.

        :param included: The included of this ApiBoards.
        :type: bool
        """
        if included is None:
            raise ValueError("Invalid value for `included`, must not be `None`")

        self._included = included

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiBoards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
