# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiPaymentCard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_type': 'str',
        'card_number': 'str',
        'card_holder_name': 'str',
        'expiry_date': 'str',
        'card_cvc': 'str'
    }

    attribute_map = {
        'card_type': 'cardType',
        'card_number': 'cardNumber',
        'card_holder_name': 'cardHolderName',
        'expiry_date': 'expiryDate',
        'card_cvc': 'cardCVC'
    }

    def __init__(self, card_type=None, card_number=None, card_holder_name=None, expiry_date=None, card_cvc=None):
        """
        ApiPaymentCard - a model defined in Swagger
        """

        self._card_type = None
        self._card_number = None
        self._card_holder_name = None
        self._expiry_date = None
        self._card_cvc = None

        if card_type is not None:
          self.card_type = card_type
        if card_number is not None:
          self.card_number = card_number
        if card_holder_name is not None:
          self.card_holder_name = card_holder_name
        if expiry_date is not None:
          self.expiry_date = expiry_date
        if card_cvc is not None:
          self.card_cvc = card_cvc

    @property
    def card_type(self):
        """
        Gets the card_type of this ApiPaymentCard.

        :return: The card_type of this ApiPaymentCard.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """
        Sets the card_type of this ApiPaymentCard.

        :param card_type: The card_type of this ApiPaymentCard.
        :type: str
        """

        self._card_type = card_type

    @property
    def card_number(self):
        """
        Gets the card_number of this ApiPaymentCard.

        :return: The card_number of this ApiPaymentCard.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """
        Sets the card_number of this ApiPaymentCard.

        :param card_number: The card_number of this ApiPaymentCard.
        :type: str
        """

        self._card_number = card_number

    @property
    def card_holder_name(self):
        """
        Gets the card_holder_name of this ApiPaymentCard.

        :return: The card_holder_name of this ApiPaymentCard.
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """
        Sets the card_holder_name of this ApiPaymentCard.

        :param card_holder_name: The card_holder_name of this ApiPaymentCard.
        :type: str
        """

        self._card_holder_name = card_holder_name

    @property
    def expiry_date(self):
        """
        Gets the expiry_date of this ApiPaymentCard.

        :return: The expiry_date of this ApiPaymentCard.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """
        Sets the expiry_date of this ApiPaymentCard.

        :param expiry_date: The expiry_date of this ApiPaymentCard.
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def card_cvc(self):
        """
        Gets the card_cvc of this ApiPaymentCard.

        :return: The card_cvc of this ApiPaymentCard.
        :rtype: str
        """
        return self._card_cvc

    @card_cvc.setter
    def card_cvc(self, card_cvc):
        """
        Sets the card_cvc of this ApiPaymentCard.

        :param card_cvc: The card_cvc of this ApiPaymentCard.
        :type: str
        """

        self._card_cvc = card_cvc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiPaymentCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
