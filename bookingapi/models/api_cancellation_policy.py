# coding: utf-8

"""
    APITUDE BOOKINGAPI

    BOOKINGAPI is designed to book hotels in real time as fast as in two steps. It covers the complete booking process; it allows generating lists of hotels, confirming bookings, getting lists of bookings, obtaining booking information, making cancellations and modify existing bookings.   BOOKINGAPI works in combination with CONTENTAPI to obtain content information from the hotels, such as pictures, description, facilities, services, etc. Please refer to the ContentAPI documentation and IO/DOCS for related information.    BOOKINGAPI has been designed for a two steps confirmation, but due the the complexity of client and providers systems a third method has been designed.

    OpenAPI spec version: 1.0
    Contact: apitude@hotelbeds.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiCancellationPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'hotel_amount': 'float',
        'hotel_currency': 'str',
        '_from': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'hotel_amount': 'hotelAmount',
        'hotel_currency': 'hotelCurrency',
        '_from': 'from'
    }

    def __init__(self, amount=None, hotel_amount=None, hotel_currency=None, _from=None):
        """
        ApiCancellationPolicy - a model defined in Swagger
        """

        self._amount = None
        self._hotel_amount = None
        self._hotel_currency = None
        self.__from = None

        if amount is not None:
          self.amount = amount
        if hotel_amount is not None:
          self.hotel_amount = hotel_amount
        if hotel_currency is not None:
          self.hotel_currency = hotel_currency
        if _from is not None:
          self._from = _from

    @property
    def amount(self):
        """
        Gets the amount of this ApiCancellationPolicy.

        :return: The amount of this ApiCancellationPolicy.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this ApiCancellationPolicy.

        :param amount: The amount of this ApiCancellationPolicy.
        :type: float
        """

        self._amount = amount

    @property
    def hotel_amount(self):
        """
        Gets the hotel_amount of this ApiCancellationPolicy.

        :return: The hotel_amount of this ApiCancellationPolicy.
        :rtype: float
        """
        return self._hotel_amount

    @hotel_amount.setter
    def hotel_amount(self, hotel_amount):
        """
        Sets the hotel_amount of this ApiCancellationPolicy.

        :param hotel_amount: The hotel_amount of this ApiCancellationPolicy.
        :type: float
        """

        self._hotel_amount = hotel_amount

    @property
    def hotel_currency(self):
        """
        Gets the hotel_currency of this ApiCancellationPolicy.

        :return: The hotel_currency of this ApiCancellationPolicy.
        :rtype: str
        """
        return self._hotel_currency

    @hotel_currency.setter
    def hotel_currency(self, hotel_currency):
        """
        Sets the hotel_currency of this ApiCancellationPolicy.

        :param hotel_currency: The hotel_currency of this ApiCancellationPolicy.
        :type: str
        """

        self._hotel_currency = hotel_currency

    @property
    def _from(self):
        """
        Gets the _from of this ApiCancellationPolicy.

        :return: The _from of this ApiCancellationPolicy.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this ApiCancellationPolicy.

        :param _from: The _from of this ApiCancellationPolicy.
        :type: str
        """

        self.__from = _from

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiCancellationPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
